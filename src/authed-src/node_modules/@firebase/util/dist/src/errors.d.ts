export declare type ErrorMap<ErrorCode extends string> = {
    readonly [K in ErrorCode]: string;
};
declare const ERROR_NAME = "FirebaseError";
export interface StringLike {
    toString(): string;
}
export interface ErrorData {
    [key: string]: StringLike | undefined;
}
export interface FirebaseError extends Error, ErrorData {
    readonly code: string;
    readonly message: string;
    readonly name: typeof ERROR_NAME;
    readonly stack?: string;
}
export declare class FirebaseError extends Error {
    readonly code: string;
    readonly name: "FirebaseError";
    constructor(code: string, message: string);
}
export declare class ErrorFactory<ErrorCode extends string, ErrorParams extends {
    readonly [K in ErrorCode]?: ErrorData;
} = {}> {
    private readonly service;
    private readonly serviceName;
    private readonly errors;
    constructor(service: string, serviceName: string, errors: ErrorMap<ErrorCode>);
    create<K extends ErrorCode>(code: K, ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []): FirebaseError;
}
export {};
