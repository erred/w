// Code generated by generate.go DO NOT EDIT.
package style

import (
	"encoding/base64"
	"text/template"
)

const (
        raw = ``
)

var (
	Template = template.Must(template.New("").Parse(mustString(base64.StdEncoding.DecodeString(raw))))
)

func mustString(b []byte, err error) string {
	if err != nil {
		panic(err)
	}
	return string(b)
}
