// Code generated by generate.go DO NOT EDIT.
package style

import (
	"encoding/base64"
	"text/template"
)

const (
        raw = `e3sgZGVmaW5lICJsYXlvdXQiIH19CjwhRE9DVFlQRSBodG1sPgo8aHRtbCBsYW5nPSJlbiI+CiAgPGhlYWQ+CiAgICB7eyBpZiBub3QgLkVtYmVkU3R5bGUgfX0KICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgaHJlZj0iL2Jhc2UuY3NzIiBhcz0ic3R5bGUiIGNyb3Nzb3JpZ2luIC8+CiAgICA8bGluayByZWw9InByZWxvYWQiIGhyZWY9Ii9pbmNvbnNvbGF0YS12YXIud29mZjIiIGFzPSJmb250IiB0eXBlPSJmb250L3dvZmYyIiBjcm9zc29yaWdpbiAvPgogICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBocmVmPSIvbG9yYS12YXIud29mZjIiIGFzPSJmb250IiB0eXBlPSJmb250L3dvZmYyIiBjcm9zc29yaWdpbiAvPgogICAge3sgZW5kIH19CgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiIC8+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLG1pbmltdW0tc2NhbGU9MSxpbml0aWFsLXNjYWxlPTEiIC8+CgogICAgPHRpdGxlPnt7IC5UaXRsZSB9fTwvdGl0bGU+CgogICAgPCEtLSBwcmV0dGllci1pZ25vcmUgLS0+CiAgICB7eyBpZiBub3QgLkRpc2FibGVBbmFseXRpY3MgfX17eyB0ZW1wbGF0ZSAiYW5hbHl0aWNzIiB9fXt7IGVuZCB9fQoKICAgIHt7IGlmIG5vdCAuRW1iZWRTdHlsZSB9fQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvYmFzZS5jc3MiIGNyb3Nzb3JpZ2luIC8+CiAgICB7eyBlbmQgfX0KCiAgICA8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0ie3sgLlVSTENhbm9uaWNhbCB9fSIgLz4KICAgIDxsaW5rIHJlbD0ibWFuaWZlc3QiIGhyZWY9Ii9tYW5pZmVzdC5qc29uIiAvPgoKICAgIDxtZXRhIG5hbWU9InRoZW1lLWNvbG9yIiBjb250ZW50PSIjMDAwMDAwIiAvPgogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9Int7IC5EZXNjcmlwdGlvbiB9fSIgLz4KCiAgICA8bGluayByZWw9Imljb24iIHR5cGU9ImltYWdlL3BuZyIgc2l6ZXM9IjUxMng1MTIiIGhyZWY9Imh0dHBzOi8vc2VhbmtobGlhby5jb20vaWNvbi01MTIucG5nIiAvPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBocmVmPSJodHRwczovL3NlYW5raGxpYW8uY29tL2ljb24tNTEyLnBuZyIgLz4KICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iaHR0cHM6Ly9zZWFua2hsaWFvLmNvbS9mYXZpY29uLmljbyIgLz4KCiAgICA8c3R5bGUgbm9uY2U9ImRlYWRiZWVmMSI+CiAgICAgIC8qIHByZXR0aWVyLWlnbm9yZSAqLwogICAgICB7eyBpZiAuRW1iZWRTdHlsZSB9fXt7IHRlbXBsYXRlICJiYXNlY3NzIiB9fXt7IGVuZCB9fQogICAgICAvKiBwcmV0dGllci1pZ25vcmUgKi8KICAgICAge3sgLlN0eWxlIH19CiAgICA8L3N0eWxlPgogIDwvaGVhZD4KICA8Ym9keT4KICAgIDwhLS0gcHJldHRpZXItaWdub3JlIC0tPgogICAge3sgaWYgbm90IC5EaXNhYmxlQW5hbHl0aWNzIH19e3sgdGVtcGxhdGUgImFuYWx5dGljcy1mYWxsYmFjayIgfX17eyBlbmQgfX0KCiAgICA8aDE+e3sgLkgxIH19PC9oMT4KICAgIDxoMj57eyAuSDIgfX08L2gyPgoKICAgIDxoZ3JvdXA+CiAgICAgIDxhIGhyZWY9Ii8iPgogICAgICAgIDxzcGFuPlM8L3NwYW4+CiAgICAgICAgPHNwYW4+RTwvc3Bhbj4KICAgICAgICA8c3Bhbj5BPC9zcGFuPgogICAgICAgIDxzcGFuPk48L3NwYW4+CiAgICAgICAgPGVtPks8L2VtPgogICAgICAgIDxlbT4uPC9lbT4KICAgICAgICA8ZW0+SDwvZW0+CiAgICAgICAgPGVtPi48L2VtPgogICAgICAgIDxzcGFuPkw8L3NwYW4+CiAgICAgICAgPHNwYW4+STwvc3Bhbj4KICAgICAgICA8c3Bhbj5BPC9zcGFuPgogICAgICAgIDxzcGFuPk88L3NwYW4+CiAgICAgIDwvYT4KICAgIDwvaGdyb3VwPgoKICAgIHt7IC5NYWluIH19CgogICAgPGZvb3Rlcj4KICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9zZWFua2hsaWFvLmNvbS8iPmhvbWU8L2E+CiAgICAgIHwKICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9zZWFua2hsaWFvLmNvbS9ibG9nLyI+YmxvZzwvYT4KICAgICAgfAogICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vc2VhbmtobGlhbyI+Z2l0aHViPC9hPgogICAgICB8CiAgICAgIDxhIGhyZWY9Imh0dHBzOi8vc2VhbmtobGlhby5jb20vdGVybXMvIj50ZXJtczwvYT4KICAgIDwvZm9vdGVyPgogIDwvYm9keT4KPC9odG1sPgp7eyBlbmQgfX0KCnt7IGRlZmluZSAiYW5hbHl0aWNzIiB9fQo8bGluayByZWw9InByZWNvbm5lY3QiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tIiAvPgo8bGluayByZWw9InByZWNvbm5lY3QiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tIiBjcm9zc29yaWdpbiAvPgoKPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CjxzY3JpcHQgdHlwZT0ibW9kdWxlIiBub25jZT0iZGVhZGJlZWYyIj4KICAoZnVuY3Rpb24gKHcsIGQsIHMsIGwsIGkpIHsKICAgIHdbbF0gPSB3W2xdIHx8IFtdOwogICAgd1tsXS5wdXNoKHsgImd0bS5zdGFydCI6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLCBldmVudDogImd0bS5qcyIgfSk7CiAgICB2YXIgZiA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sCiAgICAgIGogPSBkLmNyZWF0ZUVsZW1lbnQocyksCiAgICAgIGRsID0gbCAhPSAiZGF0YUxheWVyIiA/ICImbD0iICsgbCA6ICIiOwogICAgai5hc3luYyA9IHRydWU7CiAgICBqLnNyYyA9ICJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanM/aWQ9IiArIGkgKyBkbDsKICAgIGYucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaiwgZik7CiAgfSkod2luZG93LCBkb2N1bWVudCwgInNjcmlwdCIsICJkYXRhTGF5ZXIiLCAiR1RNLVRMVk43RDYiKTsKCiAgaW1wb3J0IHsKICAgIGdldENMUywKICAgIGdldEZDUCwKICAgIGdldEZJRCwKICAgIGdldExDUCwKICAgIGdldFRURkIsCiAgfSBmcm9tICJodHRwczovL3VucGtnLmNvbS93ZWItdml0YWxzQDAuMi40L2Rpc3Qvd2ViLXZpdGFscy5lczUubWluLmpzP21vZHVsZSI7CgogIGZ1bmN0aW9uIHNlbmRHVE0oeyBuYW1lLCBkZWx0YSwgaWQgfSkgewogICAgZGF0YUxheWVyLnB1c2goewogICAgICBldmVudDogIndlYi12aXRhbHMiLAogICAgICBldmVudF9jYXRlZ29yeTogIldlYiBWaXRhbHMiLAogICAgICBldmVudF9hY3Rpb246IG5hbWUsCiAgICAgIGV2ZW50X3ZhbHVlOiBNYXRoLnJvdW5kKG5hbWUgPT09ICJDTFMiID8gZGVsdGEgKiAxMDAwIDogZGVsdGEpLAogICAgICBldmVudF9sYWJlbDogaWQsCiAgICB9KTsKICB9CgogIGdldENMUyhzZW5kR1RNKTsKICBnZXRGQ1Aoc2VuZEdUTSk7CiAgZ2V0RklEKHNlbmRHVE0pOwogIGdldExDUChzZW5kR1RNKTsKICBnZXRUVEZCKHNlbmRHVE0pOwo8L3NjcmlwdD4Ke3sgZW5kIH19Cgp7eyBkZWZpbmUgImFuYWx5dGljcy1mYWxsYmFjayIgfX0KPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgKG5vc2NyaXB0KSAtLT4KPG5vc2NyaXB0PjxpZnJhbWUgc3JjPSJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS1UTFZON0Q2Ij48L2lmcmFtZT48L25vc2NyaXB0Pgo8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgKG5vc2NyaXB0KSAtLT4Ke3sgZW5kIH19Cgp7eyBkZWZpbmUgImJhc2Vjc3MiIH19CiogewogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7Cn0KOnJvb3QgewogIGJhY2tncm91bmQ6ICMwMDA7CiAgY29sb3I6ICNlY2VmZjE7CiAgZm9udDogMThweCAiSW5jb25zb2xhdGEiLCBtb25vc3BhY2U7Cn0KCkBmb250LWZhY2UgewogIGZvbnQtZmFtaWx5OiAiSW5jb25zb2xhdGEiOwogIGZvbnQtc3R5bGU6IG5vcm1hbDsKICBmb250LXdlaWdodDogNDAwOwogIGZvbnQtZGlzcGxheTogc3dhcDsKICBzcmM6IGxvY2FsKCJJbmNvbnNvbGF0YSIpLCBsb2NhbCgiSW5jb25zb2xhdGEtUmVndWxhciIpLAogICAgdXJsKGh0dHBzOi8vc2VhbmtobGlhby5jb20vaW5jb25zb2xhdGEtdmFyLndvZmYyKSBmb3JtYXQoIndvZmYyLXZhcmlhdGlvbnMiKSwKICAgIHVybChodHRwczovL3NlYW5raGxpYW8uY29tL2luY29uc29sYXRhLTQwMC53b2ZmMikgZm9ybWF0KCJ3b2ZmMiIpOwp9CkBmb250LWZhY2UgewogIGZvbnQtZmFtaWx5OiAiSW5jb25zb2xhdGEiOwogIGZvbnQtc3R5bGU6IG5vcm1hbDsKICBmb250LXdlaWdodDogNzAwOwogIGZvbnQtZGlzcGxheTogc3dhcDsKICBzcmM6IGxvY2FsKCJJbmNvbnNvbGF0YSBCb2xkIiksIGxvY2FsKCJJbmNvbnNvbGF0YS1Cb2xkIiksCiAgICB1cmwoaHR0cHM6Ly9zZWFua2hsaWFvLmNvbS9pbmNvbnNvbGF0YS12YXIud29mZjIpIGZvcm1hdCgid29mZjItdmFyaWF0aW9ucyIpLAogICAgdXJsKGh0dHBzOi8vc2VhbmtobGlhby5jb20vaW5jb25zb2xhdGEtNzAwLndvZmYyKSBmb3JtYXQoIndvZmYyIik7Cn0KQGZvbnQtZmFjZSB7CiAgZm9udC1mYW1pbHk6ICJMb3JhIjsKICBmb250LXN0eWxlOiBub3JtYWw7CiAgZm9udC13ZWlnaHQ6IDQwMDsKICBmb250LWRpc3BsYXk6IHN3YXA7CiAgc3JjOiBsb2NhbCgiTG9yYSIpLCBsb2NhbCgiTG9yYS1SZWd1bGFyIiksIHVybChodHRwczovL3NlYW5raGxpYW8uY29tL2xvcmEtdmFyLndvZmYyKSBmb3JtYXQoIndvZmYyLXZhcmlhdGlvbnMiKSwKICAgIHVybChodHRwczovL3NlYW5raGxpYW8uY29tL2xvcmEtNDAwLndvZmYyKSBmb3JtYXQoIndvZmYyIik7Cn0KQGZvbnQtZmFjZSB7CiAgZm9udC1mYW1pbHk6ICJMb3JhIjsKICBmb250LXN0eWxlOiBub3JtYWw7CiAgZm9udC13ZWlnaHQ6IDcwMDsKICBmb250LWRpc3BsYXk6IHN3YXA7CiAgc3JjOiBsb2NhbCgiTG9yYSBCb2xkIiksIGxvY2FsKCJMb3JhLUJvbGQiKSwgdXJsKGh0dHBzOi8vc2VhbmtobGlhby5jb20vbG9yYS12YXIud29mZjIpIGZvcm1hdCgid29mZjItdmFyaWF0aW9ucyIpLAogICAgdXJsKGh0dHBzOi8vc2VhbmtobGlhby5jb20vbG9yYS03MDAud29mZjIpIGZvcm1hdCgid29mZjIiKTsKfQoKLyogPT09PT0gbGF5b3V0IGdlbmVyYWwgPT09PT0gKi8KYm9keSB7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7CiAgbWFyZ2luOiAwOwoKICAvKiA9PW92ZXJyaWRlIG5ld3RhYiBwYWdlID09ICovCiAgYmFja2dyb3VuZDogIzAwMDsKICBjb2xvcjogI2VjZWZmMTsKICBmb250OiAxOHB4ICJJbmNvbnNvbGF0YSIsIG1vbm9zcGFjZTsKfQoKLyogPT09PT0gbGF5b3V0IGhlYWRlciA9PT09PSAqLwpoZWFkZXIgewogIGRpc3BsYXk6IGdyaWQ7CiAgZ3JpZDoKICAgIFtyMS1zXSAiLiAgICAuICAgIC4gICAgdGl0bGUgdGl0bGUiIDIwdmggW3IxLWVdCiAgICBbcjEtc10gIi4gICAgLiAgICAuICAgIHRhZyAgIHRhZyIgMjB2aCBbcjItZV0KICAgIFtyMy1zXSAiLiAgICAuICAgIC4gICAgLiAgICAgLiIgMjB2aCBbcjMtZV0KICAgIFtyNC1zXSAibG9nbyBsb2dvIGxvZ28gbG9nbyAgbG9nbyIgMjB2aCBbcjQtZV0KICAgIC8gMWZyIDFmciAxZnIgMWZyIDFmcjsKICBwYWRkaW5nOiAydm1pbjsKfQpoMSB7CiAgZm9udDogNzAwIDV2bWluICJMb3JhIiwgc2VyaWY7CiAgZ3JpZC1hcmVhOiBsb2dvOwogIG1hcmdpbjogMDsKICBwbGFjZS1zZWxmOiBzdHJldGNoIHN0YXJ0Owp9CmgxIGEgewogIGRpc3BsYXk6IGdyaWQ7CiAgZ3JpZDogcmVwZWF0KDIsIDEwdm1pbikgLyByZXBlYXQoOCwgMTB2bWluKTsKICBwbGFjZS1jb250ZW50OiBjZW50ZXIgY2VudGVyOwp9CmgxICo6bnRoLWNoaWxkKG4gKyA1KSB7CiAgZ3JpZC1yb3c6IDIgLyBzcGFuIDE7Cn0KaDIgewogIGZvbnQtc2l6ZTogNC41dm1pbjsKICBncmlkLWFyZWE6IHRpdGxlOwogIG1hcmdpbjogMDsKICBwbGFjZS1zZWxmOiBlbmQ7Cn0KaGVhZGVyIHAgewogIGNvbG9yOiAjOTk5OwogIGZvbnQtc2l6ZTogMy41dm1pbjsKICBncmlkLWFyZWE6IHRhZzsKICBwbGFjZS1zZWxmOiBzdGFydCBlbmQ7CiAgdGV4dC1hbGlnbjogcmlnaHQ7Cn0KCi8qID09PT09IGxheW91dCBtYWluID09PT09ICovCm1haW4gewogIGRpc3BsYXk6IGdyaWQ7CiAgZ3JpZDogYXV0by1mbG93IC8gMWZyIG1pbm1heCgyODBweCwgODQwcHgpIDFmcjsKICBncmlkLWdhcDogMCAxZW07CiAgbWFyZ2luOiAyMHZoIDA7Cn0KbWFpbiA+ICogewogIGdyaWQtY29sdW1uOiAyIC8gc3BhbiAxOwp9Cm1haW4gPiBpZnJhbWUsCm1haW4gPiBwaWN0dXJlLAptYWluID4gcHJlLAptYWluID4gdGFibGUgewogIGdyaWQtY29sdW1uOiAxIC8gc3BhbiAzOwp9Cm1haW4gPiBwaWN0dXJlIHsKICBkaXNwbGF5OiBncmlkOwogIG1hcmdpbi10b3A6IDI1dmg7Cn0KcCBpbWcsCnBpY3R1cmUgaW1nIHsKICB3aWR0aDogMTAwJTsKICBtYXJnaW46IGF1dG87Cn0KCmgzLApoNCB7CiAgbWFyZ2luOiAyNXZoIDAgMC4yNWVtIDA7Cn0KCmg1LApoNiB7CiAgbWFyZ2luOiAxLjVlbSAwIDAuMjVlbSAwOwp9CmgzIHsKICBmb250LXNpemU6IDIuNDQxZW07Cn0KaDQgewogIGZvbnQtc2l6ZTogMS45NTNlbTsKfQpoNSB7CiAgZm9udC1zaXplOiAxLjU2M2VtOwp9Cmg2IHsKICBmb250LXNpemU6IDEuMjVlbTsKfQpwIHsKICBsaW5lLWhlaWdodDogMS41OwogIG1hcmdpbjogMCAwIDAuNWVtIDA7Cn0KCi8qID09PT09IGxheW91dCBmb290ZXIgPT09PT0gKi8KZm9vdGVyIHsKICBtYXJnaW46IDEwdmggYXV0byAzdmg7Cn0KCi8qID09PT09IHN0eWxlID09PT09ICovCmEsCmE6dmlzaXRlZCB7CiAgY29sb3I6IGluaGVyaXQ7CiAgZm9udC13ZWlnaHQ6IDcwMDsKICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsKfQphOmhvdmVyIHsKICBjb2xvcjogI2EwNmJlMDsKICB0cmFuc2l0aW9uOiBjb2xvciAwLjE2czsKfQoKaGVhZGVyIGEsCmhlYWRlciBhOmhvdmVyLApoZWFkZXIgYTp2aXNpdGVkIHsKICBjb2xvcjogaW5oZXJpdDsKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7Cn0KCnVsIHsKICBsaXN0LXN0eWxlOiBub25lOwogIG1hcmdpbjogMDsKfQp1bCA+ICogewogIG1hcmdpbjogMC41ZW07Cn0KdWwgPiBsaTpiZWZvcmUgewogIGNvbnRlbnQ6ICLCuyI7CiAgbWFyZ2luOiAwIDFjaCAwIC0zY2g7CiAgcG9zaXRpb246IGFic29sdXRlOwp9CgpvbCA+ICogewogIGxpbmUtaGVpZ2h0OiAxLjc1ZW07Cn0KCmJsb2NrcXVvdGUgewogIG1hcmdpbjogMWVtOwogIHBhZGRpbmc6IDAuMjVlbSAxZW07CiAgYm9yZGVyLWxlZnQ6IDFjaCBzb2xpZCAjOTk5Owp9Cgpjb2RlIHsKICBiYWNrZ3JvdW5kOiAjNDA0MDQwOwogIGZvbnQ6IDFlbSAiSW5jb25zb2xhdGEiLCBtb25vc3BhY2U7CiAgcGFkZGluZzogMC4xZW07Cn0KcHJlIHsKICBiYWNrZ3JvdW5kOiAjNDA0MDQwOwogIG92ZXJmbG93LXg6IHNjcm9sbDsKICBwYWRkaW5nOiAxZW07Cn0KcHJlOjotd2Via2l0LXNjcm9sbGJhciB7CiAgZGlzcGxheTogbm9uZTsKfQpwcmUgY29kZSB7CiAgcGFkZGluZzogMDsKfQoKaWZyYW1lIHsKICBtYXJnaW46IGF1dG87Cn0KCmVtIHsKICBjb2xvcjogI2EwNmJlMDsKICBiYWNrZ3JvdW5kLWNvbG9yOiB1bnNldDsKICBmb250LXN0eWxlOiBub3JtYWw7CiAgZm9udC13ZWlnaHQ6IDcwMDsKfQp0aW1lIHsKICBjb2xvcjogIzk5OTsKfQoKdGFibGUgewogIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7CiAgYm9yZGVyLXN0eWxlOiBoaWRkZW47Cn0KdGgsCnRkIHsKICBwYWRkaW5nOiAwLjRlbTsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9CnRoIHsKICBmb250LXdlaWdodDogNzAwOwogIGJvcmRlci1ib3R0b206IDAuMmVtIHNvbGlkICM5OTk7Cn0KdHI6bnRoLWNoaWxkKDVuKSB0ZCB7CiAgYm9yZGVyLWJvdHRvbTogMC4xZW0gc29saWQgIzk5OTsKfQp0Ym9keSB0cjpob3ZlciB7CiAgYmFja2dyb3VuZDogIzQwNDA0MDsKfQoKLyogPT09PT0gZ3RtID09PT09ICovCm5vc2NyaXB0IGlmcmFtZSB7CiAgaGVpZ2h0OiAwOwogIHdpZHRoOiAwOwogIGRpc3BsYXk6IG5vbmU7CiAgdmlzaWJpbGl0eTogaGlkZGVuOwp9Cnt7IGVuZCB9fQo=`
)

var (
	Template = template.Must(template.New("").Parse(mustString(base64.StdEncoding.DecodeString(raw))))
)

func mustString(b []byte, err error) string {
	if err != nil {
		panic(err)
	}
	return string(b)
}
