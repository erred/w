// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamClient interface {
	// example: http-server vanity statslogger ghdefaults
	LogHTTP(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*Result, error)
	// example: vanity
	LogBeacon(ctx context.Context, in *BeaconRequest, opts ...grpc.CallOption) (*Result, error)
	LogCSP(ctx context.Context, in *CSPRequest, opts ...grpc.CallOption) (*Result, error)
	// exmaple: ghdefaults
	LogRepo(ctx context.Context, in *RepoRequest, opts ...grpc.CallOption) (*Result, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

var streamLogHTTPStreamDesc = &grpc.StreamDesc{
	StreamName: "LogHTTP",
}

func (c *streamClient) LogHTTP(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/stream.Stream/LogHTTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var streamLogBeaconStreamDesc = &grpc.StreamDesc{
	StreamName: "LogBeacon",
}

func (c *streamClient) LogBeacon(ctx context.Context, in *BeaconRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/stream.Stream/LogBeacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var streamLogCSPStreamDesc = &grpc.StreamDesc{
	StreamName: "LogCSP",
}

func (c *streamClient) LogCSP(ctx context.Context, in *CSPRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/stream.Stream/LogCSP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var streamLogRepoStreamDesc = &grpc.StreamDesc{
	StreamName: "LogRepo",
}

func (c *streamClient) LogRepo(ctx context.Context, in *RepoRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/stream.Stream/LogRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamService is the service API for Stream service.
// Fields should be assigned to their respective handler implementations only before
// RegisterStreamService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type StreamService struct {
	// example: http-server vanity statslogger ghdefaults
	LogHTTP func(context.Context, *HTTPRequest) (*Result, error)
	// example: vanity
	LogBeacon func(context.Context, *BeaconRequest) (*Result, error)
	LogCSP    func(context.Context, *CSPRequest) (*Result, error)
	// exmaple: ghdefaults
	LogRepo func(context.Context, *RepoRequest) (*Result, error)
}

func (s *StreamService) logHTTP(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.LogHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/stream.Stream/LogHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.LogHTTP(ctx, req.(*HTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *StreamService) logBeacon(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeaconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.LogBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/stream.Stream/LogBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.LogBeacon(ctx, req.(*BeaconRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *StreamService) logCSP(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.LogCSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/stream.Stream/LogCSP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.LogCSP(ctx, req.(*CSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *StreamService) logRepo(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.LogRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/stream.Stream/LogRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.LogRepo(ctx, req.(*RepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterStreamService registers a service implementation with a gRPC server.
func RegisterStreamService(s grpc.ServiceRegistrar, srv *StreamService) {
	srvCopy := *srv
	if srvCopy.LogHTTP == nil {
		srvCopy.LogHTTP = func(context.Context, *HTTPRequest) (*Result, error) {
			return nil, status.Errorf(codes.Unimplemented, "method LogHTTP not implemented")
		}
	}
	if srvCopy.LogBeacon == nil {
		srvCopy.LogBeacon = func(context.Context, *BeaconRequest) (*Result, error) {
			return nil, status.Errorf(codes.Unimplemented, "method LogBeacon not implemented")
		}
	}
	if srvCopy.LogCSP == nil {
		srvCopy.LogCSP = func(context.Context, *CSPRequest) (*Result, error) {
			return nil, status.Errorf(codes.Unimplemented, "method LogCSP not implemented")
		}
	}
	if srvCopy.LogRepo == nil {
		srvCopy.LogRepo = func(context.Context, *RepoRequest) (*Result, error) {
			return nil, status.Errorf(codes.Unimplemented, "method LogRepo not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "stream.Stream",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "LogHTTP",
				Handler:    srvCopy.logHTTP,
			},
			{
				MethodName: "LogBeacon",
				Handler:    srvCopy.logBeacon,
			},
			{
				MethodName: "LogCSP",
				Handler:    srvCopy.logCSP,
			},
			{
				MethodName: "LogRepo",
				Handler:    srvCopy.logRepo,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "stream.proto",
	}

	s.RegisterService(&sd, nil)
}
