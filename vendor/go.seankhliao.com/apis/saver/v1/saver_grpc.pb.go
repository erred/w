// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package saver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SaverClient is the client API for Saver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaverClient interface {
	// HTTP records a HTTP request
	// Sent by middleware setup in go.seankhliao.com/usvc
	HTTP(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*HTTPResponse, error)
	// Beacon records a beacon sent by webpages
	// Sent by beacons in webpages generated by go.seankhliao.com/webstyle
	// Transformed by statslogger
	Beacon(ctx context.Context, in *BeaconRequest, opts ...grpc.CallOption) (*BeaconResponse, error)
	// CSP records an instance of a Content Security Policy report
	// Sent by browsers in reponse to CSP headers sent by go.seankhliao.com/com-seankhliao
	// Transformed by statslogger
	CSP(ctx context.Context, in *CSPRequest, opts ...grpc.CallOption) (*CSPResponse, error)
	// GHDefaults records an instance of setting repository defaults
	// Sent by go.seankhliao.com/ghdefaults
	RepoDefault(ctx context.Context, in *RepoDefaultRequest, opts ...grpc.CallOption) (*RepoDefaultResponse, error)
}

type saverClient struct {
	cc grpc.ClientConnInterface
}

func NewSaverClient(cc grpc.ClientConnInterface) SaverClient {
	return &saverClient{cc}
}

var saverHTTPStreamDesc = &grpc.StreamDesc{
	StreamName: "HTTP",
}

func (c *saverClient) HTTP(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*HTTPResponse, error) {
	out := new(HTTPResponse)
	err := c.cc.Invoke(ctx, "/saver.v1.Saver/HTTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var saverBeaconStreamDesc = &grpc.StreamDesc{
	StreamName: "Beacon",
}

func (c *saverClient) Beacon(ctx context.Context, in *BeaconRequest, opts ...grpc.CallOption) (*BeaconResponse, error) {
	out := new(BeaconResponse)
	err := c.cc.Invoke(ctx, "/saver.v1.Saver/Beacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var saverCSPStreamDesc = &grpc.StreamDesc{
	StreamName: "CSP",
}

func (c *saverClient) CSP(ctx context.Context, in *CSPRequest, opts ...grpc.CallOption) (*CSPResponse, error) {
	out := new(CSPResponse)
	err := c.cc.Invoke(ctx, "/saver.v1.Saver/CSP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var saverRepoDefaultStreamDesc = &grpc.StreamDesc{
	StreamName: "RepoDefault",
}

func (c *saverClient) RepoDefault(ctx context.Context, in *RepoDefaultRequest, opts ...grpc.CallOption) (*RepoDefaultResponse, error) {
	out := new(RepoDefaultResponse)
	err := c.cc.Invoke(ctx, "/saver.v1.Saver/RepoDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaverService is the service API for Saver service.
// Fields should be assigned to their respective handler implementations only before
// RegisterSaverService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type SaverService struct {
	// HTTP records a HTTP request
	// Sent by middleware setup in go.seankhliao.com/usvc
	HTTP func(context.Context, *HTTPRequest) (*HTTPResponse, error)
	// Beacon records a beacon sent by webpages
	// Sent by beacons in webpages generated by go.seankhliao.com/webstyle
	// Transformed by statslogger
	Beacon func(context.Context, *BeaconRequest) (*BeaconResponse, error)
	// CSP records an instance of a Content Security Policy report
	// Sent by browsers in reponse to CSP headers sent by go.seankhliao.com/com-seankhliao
	// Transformed by statslogger
	CSP func(context.Context, *CSPRequest) (*CSPResponse, error)
	// GHDefaults records an instance of setting repository defaults
	// Sent by go.seankhliao.com/ghdefaults
	RepoDefault func(context.Context, *RepoDefaultRequest) (*RepoDefaultResponse, error)
}

func (s *SaverService) hTTP(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.HTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/saver.v1.Saver/HTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.HTTP(ctx, req.(*HTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SaverService) beacon(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeaconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Beacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/saver.v1.Saver/Beacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Beacon(ctx, req.(*BeaconRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SaverService) cSP(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/saver.v1.Saver/CSP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CSP(ctx, req.(*CSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SaverService) repoDefault(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.RepoDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/saver.v1.Saver/RepoDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RepoDefault(ctx, req.(*RepoDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterSaverService registers a service implementation with a gRPC server.
func RegisterSaverService(s grpc.ServiceRegistrar, srv *SaverService) {
	srvCopy := *srv
	if srvCopy.HTTP == nil {
		srvCopy.HTTP = func(context.Context, *HTTPRequest) (*HTTPResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method HTTP not implemented")
		}
	}
	if srvCopy.Beacon == nil {
		srvCopy.Beacon = func(context.Context, *BeaconRequest) (*BeaconResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Beacon not implemented")
		}
	}
	if srvCopy.CSP == nil {
		srvCopy.CSP = func(context.Context, *CSPRequest) (*CSPResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CSP not implemented")
		}
	}
	if srvCopy.RepoDefault == nil {
		srvCopy.RepoDefault = func(context.Context, *RepoDefaultRequest) (*RepoDefaultResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method RepoDefault not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "saver.v1.Saver",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "HTTP",
				Handler:    srvCopy.hTTP,
			},
			{
				MethodName: "Beacon",
				Handler:    srvCopy.beacon,
			},
			{
				MethodName: "CSP",
				Handler:    srvCopy.cSP,
			},
			{
				MethodName: "RepoDefault",
				Handler:    srvCopy.repoDefault,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "saver/v1/saver.proto",
	}

	s.RegisterService(&sd, nil)
}
